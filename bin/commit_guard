#!/usr/bin/env ruby

require 'rubygems'
require 'commit_guard'
require 'commander/import'

program :version, CommitGuard::VERSION
program :description, 'Command line utility for preventing unwanted code from making it into commits'

command :run do |c|
  c.syntax = 'commit_guard run [options]'
  c.summary = 'Run guards against the directory'
  c.description = ''
  c.example 'description', 'command example'
  c.option '-s', '--silent', 'Run the commit guard without displaying the output from passing guards'
  c.action do |args, options|
    project_path =  ARGV[0] || ENV['PWD']
    runner = CommitGuard::Runner.new(project_path, options)
    runner.run
    exit runner.exit_status
  end
end

command :new do |c|
  c.syntax = 'commit_guard new [options]'
  c.summary = 'Create a new guard'
  c.description = ''
  c.example 'description', 'command example'
  c.action do |args, options|
    project_path = ENV['PWD']
    configuration = CommitGuard::Configuration.new(ENV['HOME'], project_path, options)
    prompt = CommitGuard::GuardPrompt.new(configuration)
    prompt.run
  end
end

command :generate do |c|
  c.syntax = 'commit_guard generate [options]'
  c.summary = 'Generate a default list of guards'
  c.description = ''
  c.example 'description', 'command example'
  c.action do |args, options|
    project_path = ENV['PWD']
    configuration = CommitGuard::Configuration.new(ENV['HOME'], project_path, options)
    generator = CommitGuard::DefaultGenerator.new(configuration)
    generator.run
  end
end

default_command :run
